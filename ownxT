import pandas as pd
from socceraction.data.opta import OptaLoader, parsers
import socceraction.spadl as spadl
import socceraction.xthreat as xthreat
import os
import re
from loadFiles import loadFiles
# 1. Load a set of actions to train the model on
action = pd.DataFrame()
folder_path = "C:/Users/jda/Desktop/Hvidovre IF - Silkeborg IF/python/data/!Processed"
files_in_folder = os.listdir(folder_path)
for file in files_in_folder:        
    parts = file.split('_')
    Home =  parts[0]
    Away = parts[1]                
    matched_files = loadFiles(Home, Away, "!Processed")
    metadata = matched_files["metadata"]
    rawdata = matched_files["raw"]
    additional_metadata =  matched_files["additionalMetaData"]
    f7 =  matched_files["f7"]
    f24 =  matched_files["f24"]
    match = re.search(r'(\d+)-eventdetails.xml$', f24)
    if match:
        # Extract the number from the match
        match_id = int(match.group(1))
        print(f"Extracted number: {match_id}")
    else:
        print("No match found")

    api = OptaLoader(
        root = f"C:/Users/jda/Desktop/Hvidovre IF - Silkeborg IF/python/data/!Processed/{Home}_{Away}",
        feeds={
            "f7": f7,
            "f24": f24
        },
        parser={
            "f7": parsers.F7XMLParser,  # Use the F7XMLParser for parsing f7 feed files
            "f24": parsers.F24XMLParser  # Use the F24XMLParser for parsing f24 feed files
        }
    )
    
    # Get events
    events = api.events(match_id)
    
    # Convert actions to SPADL
    df_actions = spadl.opta.convert_to_actions(events, 1)
    
    # Merge names for teams and players
    df_actions = (spadl.add_names(df_actions)
                  .merge(api.teams(match_id).merge(api.players(match_id))))
    action = pd.concat([action, df_actions], ignore_index=True)

# 3. Train xT model with 16 x 12 grid
xTModel = xthreat.ExpectedThreat(l=16, w=12)
xTModel.fit(action)

# 4. Rate ball-progressing actions
# xT should only be used to value actions that move the ball
# and that keep the current team in possession of the ball
df_mov_actions = xthreat.get_successful_move_actions(df_actions)
df_mov_actions["xT_value"] = xTModel.rate(df_mov_actions)